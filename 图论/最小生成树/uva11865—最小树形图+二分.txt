#include <iostream>
#include <stack>
#include <vector>
#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;
const int INF = 0x3fffffff;
const int N = 50030;
const int M = 100300;
typedef int MyType;

struct Edge{
    int u,v;
    MyType w;
    int kbps,flag;
}edge[M],cpedge[M];
int pre[N],id[N],vis[N];
MyType in[N];

int Directed_MST(int root,int V,int E)
{
    MyType ret = 0;
    while(true){
        for( int i = 0 ; i < V ; ++i ){
            in[i] = INF;
        }
        for( int i = 0 ; i < E ; ++i ){
            if( !edge[i].flag ) continue;
            int u = edge[i].u;
            int v = edge[i].v;
            if(edge[i].w < in[v] && u != v){
                pre[v] = u;
                in[v] = edge[i].w;
            }
        }
        for( int i = 0 ; i < V ; ++i ){
            if(i == root) continue;
            if(in[i] == INF) return -1;
        }

        int cnt = 0;
        memset(id,-1,sizeof(id));
        memset(vis,-1,sizeof(vis));
        in[root] = 0;
        for( int i = 0 ; i < V ; ++i ){
            ret += in[i];
            int v = i;
            while(vis[v] != i && id[v] == -1 && v != root){
                vis[v] = i;
                v = pre[v];
            }
            if(v != root && id[v] == -1){
                for( int u = pre[v] ; u != v ; u = pre[u] ) id[u] = cnt;
                id[v] = cnt++;
            }
        }
        if(cnt == 0) break;
        for( int i = 0 ; i < V ; ++i )
            if(id[i] == -1) id[i] = cnt++;

        for( int i = 0 ; i < E ; ++i ){
            if( !edge[i].flag ) continue;
            int u = edge[i].u;
            int v = edge[i].v;
            edge[i].u = id[u];
            edge[i].v = id[v];
            if(id[u] != id[v])
                edge[i].w -= in[v];
        }
        V = cnt;
        root = id[root];
    }

    return ret;
}

int main()
{
    int T;
    scanf("%d",&T);
    while( T-- ){
        int n,m,cost,u,v,b,c,mx = -INF;
        scanf("%d%d%d",&n,&m,&cost);
        for( int i = 0 ; i < m ; ++i ){
            scanf("%d%d%d%d",&u,&v,&b,&c);
            cpedge[i].u = u;
            cpedge[i].v = v;
            cpedge[i].kbps = b;
            cpedge[i].w = c;
            mx = max(mx,b);
        }

        int mid,l=0,r=mx,ans=-1;
        while(l<=r){
            mid = (l+r)>>1;
            for( int i = 0 ; i < m ; ++i ){
                edge[i] = cpedge[i];
                if( edge[i].kbps < mid ) edge[i].flag = 0;
                else edge[i].flag = 1;
            }
            int s  = Directed_MST(0,n,m);
            if(s == -1 || s > cost){
                r = mid-1;
            }else{
                l = mid+1;
                ans = mid;
            }
        }

        if(ans == -1) printf("streaming not possible.\n");
        else printf("%d kbps\n",ans);
    }
    return 0;
}
