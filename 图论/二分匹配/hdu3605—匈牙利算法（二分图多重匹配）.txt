#include <iostream>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <string>
#include <stack>
#include <queue>

using namespace std;

typedef long long ll;
const int N = 100100;
const int M = 13;
const int INF = 0x3fffffff;
const double eps = 1e-8;
const double PI = acos(-1.0);

//二分图的多重匹配

struct Edge{
    int node;
    Edge*next;
}m_edge[N*20];
int girl[M][N];    //一个女孩能有多个对象
Edge*head[N];
int Flag[M],Ecnt,cnt;

void init()
{
    Ecnt = cnt = 0;
    memset( girl , 0 , sizeof(girl) );
    fill( head , head+N , (Edge*)0 );
}

//b对g有好感
void mkEdge( int b , int g )
{
    m_edge[Ecnt].node = g;
    m_edge[Ecnt].next = head[b];
    head[b] = m_edge+Ecnt++;
}

int cap[M],num[M];

bool find( int x )
{
    for( Edge*p = head[x] ; p ; p = p->next ){
        int s = p->node;   //有好感的女生
        if( !Flag[s] ){
            Flag[s] = true; //该女生在本轮匹配中被访问
            //女孩的对象个数还没达到限制
            if( num[s] < cap[s] ){
                girl[s][num[s]++] = x;
                return true;
            }
            //女孩的某个对象能主动让出来
            for( int i = 0 ; i < num[s] ; ++i ){
                if( find(girl[s][i]) ){
                    girl[s][i] = x;
                    return true;
                }
            }
        }
    }
    return false;
}

//构建二分图
void Build( int n , int m )
{
    memset( cap , 0 , sizeof(cap) );
    memset( num , 0 , sizeof(num) );
    int s;
    for( int i = 1 ; i <= n ; ++i ){
        for( int j = 1 ; j <= m ; ++j ){
            scanf("%d",&s);
            if( s ) mkEdge(i,j);
        }
    }
    for( int j = 1 ; j <= m ; ++j )
        scanf("%d",&cap[j]);
}

bool solve( int n )
{
    for( int i =  1 ; i <= n ; ++i ){
        fill( Flag , Flag+M , 0 );
        if( !find(i) ) return false;
    }
    return true;
}

int main()
{
    int n,m;
    while( ~scanf("%d%d",&n,&m) ){
        init();
        Build(n,m);
        if( solve(n) ) printf("YES\n");
        else printf("NO\n");
    }
    return 0;
}
