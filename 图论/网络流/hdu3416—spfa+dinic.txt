#include <cstdio>
#include <algorithm>
#include <queue>
#include <iostream>
#include <cstring>

using namespace std;

const int N = 1300;
const int M = 100900;

struct edge{
    int node,len,flag;
    edge*next;
}m_edge[M*2];
edge*head[N];
int Ecnt,dist[N],vis[N];

//边的结构
struct edge_t{
    int node;
    int c;//c为容量
    edge_t* next;
    edge_t* redge;//指向反向边
}Edge[M*2];

//图的邻接表
edge_t* Ver[N];
int ECnt;

void init()
{
    Ecnt = ECnt = 0;
    fill( head , head+N , (edge*)0 );
    fill( Ver , Ver+N , (edge_t*)0 );
}

void MK( int a , int b , int c , int flag )
{
    m_edge[Ecnt].node = b;
    m_edge[Ecnt].len = c;
    m_edge[Ecnt].next = head[a];
    m_edge[Ecnt].flag = flag;
    head[a] = m_edge+Ecnt++;
}

//生成双向边
void mkEdge(int a,int b,int c){
    int t1 = ECnt++;
    int t2 = ECnt++;

    Edge[t1].node = b;
    Edge[t1].c = c;
    Edge[t1].next = Ver[a];
    Edge[t1].redge = Edge + t2;
    Ver[a] = Edge + t1;

    Edge[t2].node = a;
    Edge[t2].c = 0;
    Edge[t2].next = Ver[b];
    Edge[t2].redge = Edge + t1;
    Ver[b] = Edge + t2;
}

void spfa( int u )
{
    fill( dist , dist+N , INT_MAX );
    fill( vis , vis+N , 0 );
    queue<int>point;
    point.push(u);
    vis[u] = 1;
    dist[u] = 0;
    while( !point.empty() ){
        int s = point.front();
        point.pop();
        vis[s] = 0;
        for( edge*p = head[s] ; p ; p = p->next ){
            int t = p->node;
            if( dist[t] > dist[s]+p->len ){
                dist[t] = dist[s]+p->len;
                if( !vis[t] ){
                    point.push(t);
                    vis[t] = 1;
                }
            }
        }
    }
}

int L[N];//层次图

//建立残留网络从源s到汇t的层次图
bool bfs(int s,int t){
    fill(L,L+N,-1);
    queue<int>q;
    q.push(s);
    L[s] = 0;

    while( !q.empty() ){
        int u = q.front();
        q.pop();

        //寻找还有残量的边
        for(edge_t*p=Ver[u];p;p=p->next){
            if ( p->c <= 0 ) continue;

            int v = p->node;
            if ( -1 != L[v] ) continue;

            q.push(v);
            L[v] = L[u] + 1;
        }
    }

    return -1 != L[t];
}

//在层次图上搜索增广路径，本质上就是搜索可以增广的流量
//这个流量是各层之间流量的最小值
//u为当前节点，cf为当前层的最小流，t为汇点
int dfs(int u,int e,int cf){
    if ( u == e ) return cf;

    int tf = 0;  //tf记录u往下一层的总可行流量
    for(edge_t*p=Ver[u];p;p=p->next){
        int v = p->node;
        int c = p->c;

        if ( L[u] + 1 == L[v] && c > 0 && cf > tf ){
            int f = dfs(v,e,min(c,cf-tf));
            if ( 0 == f ) continue;

            p->c -= f;//正向边减去可行流量
            p->redge->c += f;//反向边加上
            tf += f;
        }
    }
    if ( 0 == tf ) L[u] = -1;//修改层次图
    return tf;
}

//Dinic算法，s为源，t为汇
int Dinic(int s,int t){
    int ret = 0;
    while( bfs(s,t) ){//第一步建立分层图
        int ans;
        //第二步在分层图上查找一条增广路径的可行流量
        while( ans = dfs(s,t,INT_MAX) )
            ret += ans;
    }
    return ret;
}

void Build( int u )
{
    //vis[u] = 1;
    for( edge*p = head[u] ; p ; p = p->next ){
        int v = p->node;
        if( dist[u] + p->len != dist[v] || p->flag ) continue;
        p->flag = 1;
        mkEdge(u,v,1);
        Build( v );
    }
}

int main()
{
    int T;
    scanf("%d",&T);
    while( T-- ){
        init();
        int n,m,s,t;
        scanf("%d%d",&n,&m);
        int a,b,c;
        for( int i = 0 ; i < m ; ++i ){
            scanf("%d%d%d",&a,&b,&c);
            MK(a,b,c,0);
        }
        scanf("%d%d",&s,&t);
        spfa(s);
        //fill( vis , vis+N , 0 );
        Build( s );
        printf("%d\n",Dinic(s,t));
    }
    return 0;
}
