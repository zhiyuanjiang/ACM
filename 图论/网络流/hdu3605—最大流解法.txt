#include <cstdio>
#include <algorithm>
#include <queue>
#include <iostream>
#include <cstring>

using namespace std;

const int N = 1300;
const int M = 20900;

//边的结构
struct edge_t{
    int node;
    int c;//c为容量
    edge_t* next;
    edge_t* redge;//指向反向边
}Edge[M*2];
int ECnt;

//图的邻接表
edge_t* Ver[N];

void init(){
    ECnt = 0;
    fill(Ver,Ver+N,(edge_t*)0);
}

//生成双向边
void mkEdge(int a,int b,int c){
    int t1 = ECnt++;
    int t2 = ECnt++;

    Edge[t1].node = b;
    Edge[t1].c = c;
    Edge[t1].next = Ver[a];
    Edge[t1].redge = Edge + t2;
    Ver[a] = Edge + t1;

    Edge[t2].node = a;
    Edge[t2].c = 0;
    Edge[t2].next = Ver[b];
    Edge[t2].redge = Edge + t1;
    Ver[b] = Edge + t2;
}

int L[N];//层次图

//建立残留网络从源s到汇t的层次图
bool bfs(int s,int t){
    fill(L,L+N,-1);
    queue<int>q;
    q.push(s);
    L[s] = 0;

    while( !q.empty() ){
        int u = q.front();
        q.pop();

        //寻找还有残量的边
        for(edge_t*p=Ver[u];p;p=p->next){
            if ( p->c <= 0 ) continue;

            int v = p->node;
            if ( -1 != L[v] ) continue;

            q.push(v);
            L[v] = L[u] + 1;
        }
    }

    return -1 != L[t];
}

//在层次图上搜索增广路径，本质上就是搜索可以增广的流量
//这个流量是各层之间流量的最小值
//u为当前节点，cf为当前层的最小流，t为汇点
int dfs(int u,int e,int cf){
    if ( u == e ) return cf;

    int tf = 0;  //tf记录u往下一层的总可行流量
    for(edge_t*p=Ver[u];p;p=p->next){
        int v = p->node;
        int c = p->c;

        if ( L[u] + 1 == L[v] && c > 0 && cf > tf ){
            int f = dfs(v,e,min(c,cf-tf));
            if ( 0 == f ) continue;

            p->c -= f;//正向边减去可行流量
            p->redge->c += f;//反向边加上
            tf += f;
        }
    }
    if ( 0 == tf ) L[u] = -1;//修改层次图
    return tf;
}

//Dinic算法，s为源，t为汇
int Dinic(int s,int t){
    int ret = 0;
    while( bfs(s,t) ){//第一步建立分层图
        int ans;
        //第二步在分层图上查找一条增广路径的可行流量
        while( ans = dfs(s,t,INT_MAX) )
            ret += ans;
    }
    return ret;
}

int node[1200];
const int S = 1200;
const int T = 1201;
const int R = 1202; //m个点编号的起点

//10万个点跑网络流妥妥的TLE
//因为m的值最大为10，所以可以将10万个点压缩成1024的点，及能在相同星球生存的人看做一类人
void Build( int n , int m )
{
    memset( node , 0 , sizeof(node) );
    int s,t,r;
    for( int i = 0 ; i < n ; ++i ){
        s = 0; r = 1;
        for( int j = 0 ; j < m ; ++j ){
            scanf("%d",&t);
            s += r*t;
            r <<= 1;
        }
        node[s]++;
    }

    for( int i = 0 ; i < m ; ++i ){
        scanf("%d",&t);
        mkEdge(R+i,T,t);
    }

    for( int i = 0 ; i < 1200 ; ++i ){
        if( node[i] == 0 ) continue;
        t = i; r = 0;
        while( t ){
            if( t&1 ) mkEdge(i,R+r,node[i]);
            t >>= 1;
            r++;
        }
        mkEdge(S,i,node[i]);
    }
}

int main()
{
    int n,m;
    while( ~scanf("%d%d",&n,&m) ){
        init();
        Build(n,m);
        int ans = Dinic(S,T);
        if( ans >= n ) printf("YES\n");
        else printf("NO\n");
    }
    return 0;
}
