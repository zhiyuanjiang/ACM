#include <iostream>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>

using namespace std;

const int N = 20000;
const int M = 100000;

struct Edge{
    int node;
    Edge*next;
}m_edge[M];
Edge*head[N];
int Ecnt;

void init()
{
    Ecnt = 0;
    fill( head , head+N , (Edge*)0 );
}

void mkEdge( int a , int b )
{
    m_edge[Ecnt].node = b;
    m_edge[Ecnt].next = head[a];
    head[a] = m_edge+Ecnt++;
}

int mark[N],S[N],top;

bool sat( int x )
{
    if(mark[x^1]) return false;
    if(mark[x]) return true;
    mark[x] = true;
    S[top++] = x;
    for( Edge*p = head[x] ; p ; p = p->next ){
        if( !sat(p->node) ) return false;
    }
    return true;
}

bool solve( int n )
{
    memset(mark,0,sizeof(mark));
    for( int i = 0 ; i < n*2 ; i += 2 ){
        if( !mark[i]&&!mark[i+1] ){
            top = 0;
            if( !sat(i) ){
                while(top) mark[S[--top]] = false;
                if( !sat(i+1) ) return false;
            }
        }
    }
    return true;
}

int main()
{
    int n,m;
    while( ~scanf("%d%d",&n,&m) ){
        init();
        int a,b;
        for( int i = 0 ; i < m ; ++i ){
            scanf("%d%d",&a,&b);
            a--; b--;
            mkEdge(a,b^1);   
            mkEdge(b,a^1);
        }
        if( !solve(n) ) printf("NIE\n");
        else{
            for( int i = 0 ; i < 2*n ; ++i )
                if( mark[i] ) printf("%d\n",i+1);
        }
    }
    return 0;
}
