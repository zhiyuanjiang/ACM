#include <iostream>
#include <cstdio>
#include <queue>
#include <vector>

using namespace std;
typedef long long ll;

const int N = 100100;
const ll INF = 0x3ffffffffffffLL;

//求一个集合的点间的最短距离
//若存在最短的距离，则最短路的始点和终点肯定不为同一点，即至少有一个二进制位不同
//所以我们可以根据同一个二进制位下的0和1将一个集合划分成两个集合
//跑dijkstra求两个集合的点间最短距离。
//然后枚举不同的二进制位，起点和终点总会划分在两个不同的集合内
//此时求出的最短距离就是一个集合点间的最短距离
//这样最多跑log(n)次的dijkstra

struct Edge{
    int node;
    ll len;
    Edge*next;
}m_edge[N*2];
Edge*head[N];
int Ecnt,flag[N],tick[N];
ll dist[N];

void init()
{
    Ecnt = 0;
    fill(head,head+N,(Edge*)0);
}

void mkEdge(int a,int b,int c)
{
    m_edge[Ecnt].node = b;
    m_edge[Ecnt].len = c;
    m_edge[Ecnt].next = head[a];
    head[a] = m_edge+Ecnt++;
}

struct HeapNode{
    ll d; int u;
    HeapNode(ll _d,int _u){
        d = _d; u = _u;
    }
    bool operator < (const HeapNode&a)const{
        return d > a.d;
    }
};

priority_queue<HeapNode>Q;
vector<int>vec;

ll dijkstra(int n)
{
    while(!Q.empty()) Q.pop();

    fill(dist,dist+N,INF);
    fill(flag,flag+N,0);

    for( int i = 1 ; i <= n ; ++i ){
        if(tick[i] == 1){
            Q.push(HeapNode(0,i));
            dist[i] = 0;
        }
    }

    while(!Q.empty()){
        HeapNode x = Q.top();
        Q.pop();

        int u = x.u;
        if(tick[u] == 2) return x.d;

        if(flag[u]) continue;
        flag[u] = 1;

        for(Edge*p = head[u] ; p ; p = p->next){
            int v = p->node;
            if(dist[v] > dist[u]+(ll)p->len){
                dist[v] = dist[u]+(ll)p->len;
                Q.push(HeapNode(dist[v],v));
            }
        }
    }

    return INF;
}

ll solve(int r,int n)
{
    memset(tick,0,sizeof(tick));
    ll ans = INF;

    for( int i = 0 ; (1<<i) <= r ; ++i ){
        for( int j = 0 ; j < vec.size() ; ++j ){
            if((1<<i)&vec[j]){
                tick[vec[j]] = 1;   //1代表始点
            }else{
                tick[vec[j]] = 2;   //2代表终点
            }
        }

        ans = min(ans,dijkstra(n));

        for( int j = 1 ; j <= n ; ++j ){
            if(tick[j] == 1)  tick[j] = 2;
            else if(tick[j] == 2)  tick[j] = 1;
        }

        ans = min(ans,dijkstra(n));
    }

    return ans;
}

int main()
{
    int T,cas = 0;
    scanf("%d",&T);
    while(T--){
        init();
        int n,m,a,b,c;

        scanf("%d%d",&n,&m);
        for( int i = 0 ; i < m ; ++i ){
            scanf("%d%d%d",&a,&b,&c);
            mkEdge(a,b,c);
        }

        scanf("%d",&a);
        int r = 0;
        vec.clear();
        for( int i = 0 ; i < a ; ++i ){
            scanf("%d",&b);
            vec.push_back(b);
            r = max(b,r);   //集合中编号最大的点
        }

        printf("Case #%d: %lld\n",++cas,solve(r,n));
    }
    return 0;
}
