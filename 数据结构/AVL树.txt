#include <bits/stdc++.h>

using namespace std;

const int N = 2100;

struct Node{
    int lay;
    int data;
    int height;     //结点高度
    Node*left,*right;
    Node(){
        data = -1;
        height = 0;
        left = right = NULL;
    }
};

/*
失衡的四种情况
1.插入左子树的左结点，右旋操作
2.插入右子树的右结点，左旋操作
3.插入左子树的右结点，先左旋再右旋
4.插入右子树的左结点，先右旋再左旋
*/

//返回结点高度
int Height(Node*p)
{
    if(p){
        return p->height;
    }
    return 0;
}

//单左旋,往右子树插入右孩子,使得平衡因子由绝对值1变为绝对值2
Node*leftRotation(Node*root)
{
    Node*p = root->right;
    root->right = p->left;
    p->left = root;

    root->height = max(Height(root->right),Height(root->left))+1;  //更新结点高度
    p->height = max(Height(p->right),Height(p->left))+1;           //更新结点高度

    return p;
}

//单右旋,往左子树插入左孩子,使得平衡因子由绝对值1变为绝对值2
Node*rightRotation(Node*root)
{
    Node*p = root->left;
    root->left = p->right;
    p->right = root;

    root->height = max(Height(root->right),Height(root->left))+1;  //更新结点高度
    p->height = max(Height(p->right),Height(p->left))+1;           //更新结点高度

    return p;
}

//先右旋后左旋,往右子树中插入左孩子
Node*rightLeftRotation(Node*root)
{
    root->right = rightRotation(root->right);
    return leftRotation(root);
}

//先左旋后右旋,往左子树中插入右孩子
Node*leftRightRotation(Node*root)
{
    root->left = leftRotation(root->left);
    return rightRotation(root);
}

Node*rightBalance(Node*root)
{
    if(Height(root->right)-Height(root->left) == 2){
        // root右子树失衡
        Node*tmp = root->right;
        if(Height(tmp->right)-Height(tmp->left) < 0)
            // 相当于往右子树的左节点插入
            root = rightLeftRotation(root);
        else
            // 相当于往右子树的右节点插入， 如果root->right的左右子树均衡，同样进行左旋
            root = leftRotation(root);
    }
    return root;
}

Node*leftBalance(Node*root)
{
    if(Height(root->left)-Height(root->right) == 2){
        // root左子树失衡
        Node*tmp = root->left;
        if(Height(tmp->left)-Height(tmp->right) < 0)
            // 相当于往左子树的右节点插入
            root = leftRightRotation(root);
        else
            // 相当于往左子树的左节点插入，当root->left左右子树均衡时，同样进行右旋
            root = rightRotation(root);
    }
    return root;
}

Node*insert(Node*root,int key)
{
    if(root == NULL){
        root = new Node();
        root->data = key;
    }else if(key > root->data){            //插入到当前结点的右子树上
        root->right = insert(root->right,key);
        root = rightBalance(root);
    }else if(key < root->data){           //插入到当前结点的左子树上
        root->left = insert(root->left,key);
        root = leftBalance(root);
    }
    root->height = max(Height(root->left),Height(root->right))+1;
    return root;
}


// 删除节点
Node*remove(Node* root, int key)
{
    Node*d_root = root;

    if(key > root->data && root->right != NULL){
        root->right = remove(root->right, key);
        root = leftBalance(root);
    }else if(key < root->data && root->left != NULL){
        root->left = remove(root->left, key);
        root = rightBalance(root);
    }

    if(key == root->data){
        // key只有右子树
        if(root->left == NULL){
            root = root->right;
            delete d_root;
        }else if(root->right == NULL){
            // key只有左子树
            root = root->left;
            delete d_root;
        }else{
            // key有右子树和左子树
            Node*tmp = root->left;
            while(tmp->right != NULL) tmp = tmp->right;
            root->data = tmp->data;
            // 递归删除
            root->left = remove(root->left, tmp->data);
            root = rightBalance(root);
        }
    }

    if(root)
        root->height = max(Height(root->left),Height(root->right))+1;
    return root;
}

Node* find(Node*root, int key)
{
    Node*ans = NULL;
    if(root->data == key) ans = root;
    if(root->right != NULL && key > root->data)
        ans = find(root->right, key);
    if(root->left != NULL && key < root->data)
        ans = find(root->left, key);
    return ans;
}

void destroy(Node*root)
{
    if(root == NULL){
        destroy(root->left);
        destroy(root->right);
        delete root;
        root = NULL;
    }
}

//中序遍历
void inOrder(Node*root)
{
    if(root != NULL){
        inOrder(root->left);
        cout << root->data << " " << root->height << endl;
        inOrder(root->right);
    }
}

vector<int>vec[N];

//按层次输出ALV树
void traverse(Node*root)
{
    queue<Node*>q;
    root->lay = 0;
    q.push(root);
    int h = Height(root);

    while(!q.empty()){
        Node*p = q.front();
        q.pop();
        int lay = p->lay;
        vec[lay].push_back(p->data);
        if(p->left != NULL){
            p->left->lay = lay+1;
            q.push(p->left);
        }
        if(p->right != NULL){
            p->right->lay = lay+1;
            q.push(p->right);
        }
    }

    cout << root->data;
    for(int i = 1; i < h; ++i){
        for(int j = 0; j < vec[i].size(); ++j){
            cout << " " << vec[i][j];
        }
    }
    cout << endl;
}

//判断一颗树是否是完全二叉树
//使用队列，当队列中弹出空的结点，做个标记，若之后出现非空结点，则不是完全二叉树
int judge(Node*root)
{
    queue<Node*>q;
    q.push(root);

    int flag = 0;
    while(!q.empty()){
        Node*u = q.front();
        q.pop();
        if(flag == 1 && u != NULL) return 1;
        if(u != NULL){
            q.push(u->left);
            q.push(u->right);
        }
        if(u == NULL && flag == 0){
            flag = 1;
        }
    }

    return 0;
}

int main()
{
    Node*root = NULL;
//    int n,a;
//    cin >> n;
//    for(int i = 0; i < n; ++i){
//        cin >> a;
//        root = insert(root,a);
//    }
//    cin >> a;
//    root = remove(root, a);
    root = insert(root ,3);
    root = insert(root ,2);
    root = insert(root ,1);
    root = insert(root ,4);
    root = insert(root ,6);
    root = remove(root, 1);
    inOrder(root);
    Node*p = find(root, 3);
    cout << p->data << endl;
    //inOrder(root);
    if(judge(root)) cout << "NO" << endl;
    else cout << "YES" << endl;
    return 0;
}
