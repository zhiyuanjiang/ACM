#include <iostream>
#include <algorithm>
#include <cstdio>
#include <cstring>

using namespace std;

/*
先看看题目吧

hdu1394 求逆序对
依次遍历A[i],只要知道前面有多少个数大于A[i],就知道前面的数相对于A[i]构成多少个逆序对m。
将A[i]的值依次插入 按照从小到大排列的序列中 ，例如：A[i] = 4，则在i=4处+1。
则m = i-sum(A[i])(此时一共插入了i个数，i左边的数不和i构成逆序对，但i右边的数能和i构成逆序对)。
而对于将序列第一个数放到最后一个,这样增加n-A[i]个逆序对,减少A[i]-1个逆序对。
*/

#define lowbit(x) (x&-x)

const int maxn = 1000010;

int C[maxn],A[maxn];

void init(int n)
{
    memset(C,0,sizeof(C));
//    for(int i = 1; i <= n; ++i){
//        for(int j = i-lowbit(i)+1; j <= i; ++j){
//            C[i] += A[j];
//        }
//    }
}

//sum[A1,Ax]
int sum(int x)
{
    int ret = 0;
    while(x){
        ret += C[x];
        x -= lowbit(x);
    }
    return ret;
}

//A[x] += d
void add(int x,int d,int n)
{
    while(x <= n){
        C[x] += d;
        x += lowbit(x);
    }
}

int main()
{
    int n;
    while(~scanf("%d",&n)){
        init(n);
        int temp = 0;
        for(int i = 1; i <= n; ++i){
            scanf("%d",&A[i]);
            A[i]++;
            add(A[i],1,n);
            temp += i-sum(A[i]);
        }
        int ans = temp;
        for(int i = 1; i <= n; ++i){
            temp = temp+(n-A[i])-(A[i]-1);
            ans = min(ans,temp);
        }
        printf("%d\n",ans);
    }
    return 0;
}


