#include<cstdio>
#include<cstdlib>
#include<string>
#include<iostream>
#include<cmath>
#include<algorithm>
#include <ctime> 

using namespace std;

typedef long long ll;

const int times = 20;

ll myrand()
{
    ll a = rand();
    a=a*rand();
    return a;
}

ll fast_mult(ll x,ll n,ll mod)    //快速乘
{
    ll ans = 0;
    while(n){
        if(n&1) ans = (ans+x)%mod;
        x = (x+x)%mod;
        n >>= 1;
    }
    return ans;
}

ll fast_mi(ll x,ll n,ll mod)       //快速幂
{
    ll ans = 1;
    while(n){
        if(n&1) ans = fast_mult(ans,x,mod);
        x = fast_mult(x,x,mod);
        n >>= 1;
    }
    return ans;
}

bool Miller_Rabin(ll n,int times)
{
    ll u,x,y,a;
    if(n<2)
        return false;
    if(n==2)
        return true;
    if(!(n&1))
        return false;

    //我们先找到的最小的a^u，再逐步扩大到a^(n-1)
    for( u=n-1 ; !(u&1) ; u>>=1 );

    //Miller-Rabin测试
    for(int i=0;i<times;i++){
        a = myrand()%(n-2)+2;
        x = fast_mi(a,u,n);

        while(u < n){
            y=fast_mi(x,2,n);
            if(y == 1 && x != 1 && x != n-1){
                return false;
            }
            else{
                x=y;
                u=u*2;
            }
        }

        if(x!=1)
            return false;
    }

    return true;
}

ll f[100],cnt;

ll gcd(ll a,ll b)
{
    return b==0?a:gcd(b,a%b);
}

ll Pollard_rho(ll n,ll c)//Pollard_rho算法，找出n的因子
{
    ll i=1,j,k=2,x,y,d,p;
    x=rand()%n;
    y=x;
    while(1){
        i++;
        x=(fast_mult(x,x,n)+c)%n;
        if(y==x)return n;
        if(y>x)p=y-x;
        else p=x-y;
        d=gcd(p,n);
        if(d!=1&&d!=n)return d;

        if(i==k){
            y=x;
            k+=k;
        }
    }
}

void find(ll n)//找出n的所有因子
{
    if(Miller_Rabin(n,times)){
        f[cnt++]=n;//保存所有质因子
        return;
    }
    ll p=n;
    while(p>=n)p=Pollard_rho(p,rand()%(n-1)+1);//由于p必定为合数，所以通过多次求解必定能求得答案
    find(p);
    find(n/p);
}

int main()
{
    srand(time(NULL));//随机数设定种子
    ll n;
    while(cin>>n)
    {
        if(n==1){cout<<"is not a D_num"<<endl;continue;}//特判
        cnt=0;
        find(n);
        if(cnt!=2&&cnt!=3){cout<<"is not a D_num"<<endl;continue;}

        sort(f,f+cnt);

        if(cnt==2){
            if(f[0]!=f[1])cout<<f[0]<<" "<<f[1]<<" "<<n<<endl;
            else cout<<"is not a D_num"<<endl;
        }else{  //n是一个素数的三次方
            if(f[0]==f[1]&&f[1]==f[2])cout<<f[0]<<" "<<f[0]*f[0]<<" "<<n<<endl;
            else cout<<"is not a D_num"<<endl;
        }
    }
    return 0;
}
