#include <iostream>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <string>
#include <stack>
#include <queue>
#include <map>

using namespace std;

typedef long long ll;
const int N = 1000100;
const int M = 300100;
const int INF = 0x3fffffff;
const double eps = 1e-8;
const double PI = acos(-1.0);
const int mod = 998244353;
typedef pair<int,int>PA;

#define it (pos - l)

int Prime[N],isNotPrime[N],num_prime = 0;
void getPrime( int n )
{
    memset( isNotPrime , 0 , sizeof(isNotPrime) );
    for( int i = 2 ; i < n ; ++i ){
        if( !isNotPrime[i] ) Prime[num_prime++] = i;
        for( int j = 0 ; j < num_prime && i*Prime[j] < n ; ++j ){
            isNotPrime[i*Prime[j]] = 1;
            if( i%Prime[j] == 0 ) break;
        }
    }
}

ll inter[N],num[N];

ll getDivisionSum( ll l , ll r , ll k )
{
    ll pos;  int cnt;
    for( int i = 0 ; i < num_prime ; ++i ){
        pos = (l+Prime[i]-1)/Prime[i]*Prime[i];
        while( pos <= r ){
            cnt = 0;
            while( inter[it]%Prime[i] == 0 ){
                inter[it] /= Prime[i];
                cnt++;
            }
            num[it] = num[it]*(k*cnt+1)%mod;
            pos += Prime[i];
        }
    }

    ll ans = 0;
    for( ll pos = l ; pos <= r ; ++pos ){
        if( inter[it] != 1 ) ans = (ans+num[it]*(k+1)%mod)%mod;
        else ans = (ans+num[it])%mod;
    }

    return ans;
}

int main()
{
    getPrime(N);
    int T;
    scanf("%d",&T);
    while( T-- ){
        ll l,r,k;
        scanf("%lld%lld%lld",&l,&r,&k);

        for( ll pos = l ; pos <= r ; ++pos ){
            inter[it] = pos;
            num[it] = 1;
        }

        printf("%lld\n",getDivisionSum(l,r,k));

    }
    return 0;
}
