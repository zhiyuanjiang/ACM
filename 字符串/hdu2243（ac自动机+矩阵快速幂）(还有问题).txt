#include <iostream>
#include <algorithm>
#include <cstring>
#include <cstdio>
#include <queue>

using namespace std;

typedef unsigned long long ull;

const int col = 26;
const int maxn = 35;

struct Matrax{
    int r,c;
    ull a[maxn][maxn];
    Matrax(){
        memset(a,0,sizeof(a));
    }
};

Matrax Muti_Matrax(Matrax x,Matrax s)
{
    Matrax ans;
    ans.r = x.r; ans.c = s.c;
    for(int i = 0; i < ans.r; ++i){
        for(int j = 0; j < ans.c; ++j){
            for(int k = 0; k < x.c; ++k){
                ans.a[i][j] += x.a[i][k]*s.a[k][j];
            }
        }
    }
    return ans;
}

Matrax Add_Matrax(Matrax m1,Matrax m2)
{
    Matrax ans;
    ans.r = m1.r; ans.c = m2.c;
    for(int i = 0; i < ans.r; ++i){
        for(int j = 0; j < ans.c; ++j){
            ans.a[i][j] = m1.a[i][j]+m2.a[i][j];
        }
    }
    return ans;
}

Matrax Fast_Matrax(Matrax x,ull n)
{
    Matrax ans;
    ans.r = ans.c = x.r;
    for(int i = 0; i < ans.r; ++i) ans.a[i][i] = 1;
    while(n){
        if(n&1){
            ans = Muti_Matrax(ans,x);
        }
        x = Muti_Matrax(x,x);
        n >>= 1;
    }
    return ans;
}

class AcAutomation
{
public:
    int index;
    int fail[maxn];
    int tag[maxn];
    int trie[maxn][col];

    void init(){
        index = 1;
        memset(trie[0],-1,sizeof(trie[0]));
        memset(tag,0,sizeof(0));
    }

    void trie_insert(char st[]){
        int p = 0,len = strlen(st);
        for(int i = 0; i < len ; ++i){
            int x = st[i]-'a';
            if(trie[p][x] == -1){
                memset(trie[index],-1,sizeof(trie[index]));
                trie[p][x] = index++;
            }
            p = trie[p][x];
        }
        tag[p] = 1;
    }

    void build_fail(){
        memset(fail,-1,sizeof(fail));
        fail[0] = 0;
        queue<int>q;
        for(int i = 0; i < col; ++i){
            if(trie[0][i] != -1){
                q.push(trie[0][i]);
                fail[trie[0][i]] = 0;
            }else{
                trie[0][i] = 0;
            }
        }

        while(!q.empty()){
            int u = q.front();
            q.pop();
            if(tag[fail[u]])
                tag[u] = 1;
            for(int i = 0; i < col; ++i){
                int &v = trie[u][i];
                if(v != -1){
                    q.push(v);
                    fail[v] = trie[fail[u]][i];
                }else{
                    v = trie[fail[u]][i];
                }
            }
        }
    }

    Matrax buildMatrax(){
        Matrax ans;
        ans.r = ans.c = index;
        for(int i = 0; i < index; ++i){
            for(int j = 0; j < col; ++j){
                if(!tag[i] && !tag[trie[i][j]])
                    ans.a[i][trie[i][j]]++;
            }
        }
        return ans;
    }
};

//Matrax cal(Matrax x,int n)
//{
//    if(n == 1)
//        return x;
//
//    Matrax m,t;
//    m.r = m.c = x.r;
//    for(int i = 0; i < m.r; ++i) m.a[i][i] = 1;
//
//    t = Add_Matrax(m,Fast_Matrax(x,n/2));
//    t = Muti_Matrax(t,cal(x,n/2));
//
//    if(n%2 == 0){
//        return t;
//    }else{
//        return Add_Matrax(t,Fast_Matrax(x,n));
//    }
//}

int main()
{
    int n,m;
    char st[10];
    AcAutomation ac;
    while(~scanf("%d%d",&n,&m)){
        ac.init();
        for(int i = 0; i < n; ++i){
            scanf(" %s",st);
            ac.trie_insert(st);
        }
        ac.build_fail();
        Matrax m1 = ac.buildMatrax();
        Matrax m2;
//        m2.r = m2.c = 1;
//        m2.a[0][0] = 26;
//
//        m1 = cal(m1,m);
//        m2 = cal(m2,m);
//
//        ull ans = m2.a[0][0];
//
//        for(int i = 0; i < m1.r; ++i){
//            ans -= m1.a[0][i];
//        }
        ull ans = 0;

        m2.r = m2.c = 2;
        m2.a[0][0] = 26;
        m2.a[0][1] = 1;
        m2.a[1][0] = 0;
        m2.a[1][1] = 1;
        m2 = Fast_Matrax(m2,m);

        ans += m2.a[0][0];
        ans += m2.a[0][1];

        m1.r++; m1.c++;
        for(int i = 0; i < m1.r; ++i) m1.a[i][m1.c-1] = 1;
        for(int i = 0; i < m1.c-2; ++i) m1.a[m1.r-1][i] = 0;
        m1 = Fast_Matrax(m1,m);

        for(int i = 0; i < m1.r; ++i)
            ans -= m1.a[0][i];

        printf("%I64u  a\n",ans);
    }
    return 0;
}
