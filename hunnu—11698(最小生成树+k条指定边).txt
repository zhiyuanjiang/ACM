//最小生成树+k条指定的边

#include <iostream>
#include <vector>
#include <algorithm>
#include <cstdlib>
#include <climits>
using namespace std ;
const int MAXN = 1e6 ;
const int MAXE = 1e6 ;
const long long HIPENALTY = 100000 ;
long long N, M, K, W, WW, KK ;
typedef pair<long long, int> pli ;
char isspec[MAXN] ;
int av[MAXE], bv[MAXE] ;
long long cv[MAXE] ;
int uf[MAXN] ;
int leader(int n) {
   if (uf[n] == -1)
      return n ;
   return uf[n] = leader(uf[n]) ;
}
int main(int argc, char *argv[]) {
   scanf("%d%d%d%d",&N,&M,&K,&W);
   int v, a, b, c ;
   for (int i=0; i<K; i++) {
      scanf("%d",&v);
      v-- ;
      isspec[v] = 1 ;
   }
   vector<pli> unsp, sp, all ;
   for (int i=0; i<M; i++) {
      scanf("%d%d%d",&a,&b,&c);
      a-- ;
      b-- ;
      av[i] = a ;
      bv[i] = b ;
      cv[i] = 2LL * c ;
      if (isspec[a] == isspec[b])
         unsp.push_back(make_pair(cv[i], i)) ;
      else
         sp.push_back(make_pair(cv[i], i)) ;
   }
   sort(unsp.begin(), unsp.end()) ;
   sort(sp.begin(), sp.end()) ;
   long long hi = 2 * (HIPENALTY + 100) ;
   long long lo = - hi ;
   long long r = INT_MAX ;
   long long hiside = 0 ;
   long long loside = 0 ;
   while (hi >= lo) {
      long long mid = (hi + lo) >> 1 ;
      for (int i=0; i<sp.size(); i++)
         sp[i].first = cv[sp[i].second] + mid ;
      all.clear() ;
      merge(sp.begin(), sp.end(), unsp.begin(), unsp.end(), back_inserter(all)) ;
      for (int i=0; i<N; i++)
         uf[i] = -1 ;
      long long cst = 0 ;
      int en = 0 ;
      int sn = 0 ;
      for (int i=0; en < N-1 && i<all.size(); i++) {
         int e = all[i].second ;
         int a = av[e] ;
         int b = bv[e] ;
         if (leader(a) == leader(b))
            continue ;
         uf[leader(a)] = leader(b) ;
         en++ ;
         cst += cv[e] ;
         if (isspec[a] != isspec[b])
            sn++ ;
      }

      if (en < N-1) {
         printf("%d\n",-1);
         exit(0) ;
      }
      if (sn < W) {
         hiside = (cst >> 1) + (mid >> 1) * (sn - W) ;
         hi = mid - 1 ;
      } else if (sn > W) {
         loside = (cst >> 1) + (mid >> 1) * (sn - W) ;
         lo = mid + 1 ;
      } else {
         hiside = loside = cst >> 1 ;

         if (mid > 0)
            hi = mid - 1 ;
         else
            lo = mid + 1 ;
         break ;
      }
   }

   if (hiside == 0 || loside == 0)
      r = -4 ;
   else
      r = hiside ;

   if (r < -1) {
      r = -1 ;
   }
   printf("%I64d\n",r);
}
